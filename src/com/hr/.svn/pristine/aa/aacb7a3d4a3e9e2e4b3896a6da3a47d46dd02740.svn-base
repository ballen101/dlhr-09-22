package com.hr.util;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;


import javax.xml.namespace.QName;
import javax.xml.rpc.ServiceException;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.quartz.CronScheduleBuilder;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;

import net.sf.json.JSONObject;

import com.corsair.cjpa.CJPABase;
import com.corsair.cjpa.CJPALineData;
import com.corsair.dbpool.CDBConnection;
import com.corsair.dbpool.CDBPool;
import com.corsair.dbpool.DBPoolParms;
import com.corsair.dbpool.util.Logsw;
import com.corsair.dbpool.util.Systemdate;
import com.corsair.server.base.CSContext;
import com.corsair.server.generic.Shw_attach;
import com.corsair.server.generic.Shw_attach_line;
import com.corsair.server.generic.Shw_physic_file;
import com.corsair.server.generic.Shworg;
import com.corsair.server.retention.ACO;
import com.corsair.server.retention.ACOAction;
import com.corsair.server.util.CorUtil;
import com.hr.attd.entity.Hrkq_bckqrst;
import com.hr.attd.entity.Hrkq_swcdlst;
import com.hr.msg.entity.Hr_kq_day_report;
import com.hr.msg.entity.Hr_kq_depart_day_report;
import com.hr.perm.entity.Hr_employee_cretl;
import com.hr.timer.TaskCalcDepartDayReport;
import com.hr.util.hrmail.DLHRMailCenterWS;
import com.hr.util.hrmail.EipMail;
import com.hr.util.hrmail.Hr_emailsend_log;
import com.hr.util.hrmail.SOAPUtil;

@ACO(coname = "web.hr.test")
public class Test {
	// need time:115

	public static void main(String[] args) throws Exception {
		Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
		scheduler.start();
		// 定义一次任务
		JobDetail job = JobBuilder.newJob(TaskCalcDepartDayReport.class)
				.withIdentity("jobName1", "groupName1").build();
		// 定义执行时间,2秒1次
		Trigger trigger = TriggerBuilder
				.newTrigger()
				.withIdentity("triggerName1", "groupName1")
				.withSchedule(
						CronScheduleBuilder.cronSchedule("0/2 * * * * ?"))
				.build();
		

		scheduler.scheduleJob(job, trigger);
		

		
	}
	//String url="http://192.168.119.87:7805/WS/DONLIM/ESB/DONLIM_ESB_RMSET_FOSYMC?wsdl";
	//System.out.print(getOnline(url)); 

	public static String getOnline(String url){
		int errCode=0;
		JSONObject resultJson=new JSONObject();
		String result="";
		Service service = new Service();
		try {
			Call call=(Call) service.createCall();
			QName opAddEntry = new QName("urn:demo", "GetOnlineInfo"); //设置命名空间和需要调用的方法名
			call.setTargetEndpointAddress(url); //设置请求路径
			call.setOperationName("GetNcgOnlineInfo"); //调用的方法名
			call.setTimeout(Integer.valueOf(2000));		//设置请求超时    		
			call.setReturnType(org.apache.axis.encoding.XMLType.XSD_STRING);//设置返回类型
			result= (String) call.invoke(opAddEntry,new Object[]{});
		}
		catch (ServiceException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		resultJson.put("errCode", errCode);
		resultJson.put("data", result);

		return resultJson.toString();
	}
	private static CDBPool getpool() {
		DBPoolParms pm = new DBPoolParms();
		pm.dirver = "com.mysql.jdbc.Driver";
		pm.url = "jdbc:mysql://127.0.0.1:13306/dlhr?characterEncoding=utf-8&amp;autoReconnect=true&amp;useSSL=true";
		pm.schema = "dlhr";
		pm.user = "root";
		pm.password = "q1w2e3";
		pm.minsession = 5;
		pm.maxsession = 10;
		pm.isdefault = true;
		CDBPool pool = new CDBPool(pm);
		return pool;
	}

	public static void test() {
		try {
			Date bgdt = new Date();
			for (int i = 0; i < 1000; i++) {
				Hrkq_swcdlst sw = new Hrkq_swcdlst();
				sw.empno.setValue("00000");// 工号
				sw.card_number.setValue("11111"); // 卡号
				sw.skdate.setAsDatetime(new Date()); // yyyy-MM-dd hh:mm:ss
				sw.sktype.setAsInt(1);// 1 刷卡 2 签卡
				sw.synid.setValue("1"); // 旧ID 同步条件
				sw.save();
			}
			Date eddt = new Date();
			System.out.println("need time:" + ((eddt.getTime() - bgdt.getTime()) / 1000));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// 单个获取ID need time:50
	// 批量获取ID 15 5000 38

	public static void test2() {
		try {
			Date bgdt = new Date();
			CJPALineData<Hrkq_swcdlst> sws = new CJPALineData<Hrkq_swcdlst>(Hrkq_swcdlst.class);
			for (int i = 0; i < 5000; i++) {
				Hrkq_swcdlst sw = new Hrkq_swcdlst();
				sw.empno.setValue("00000");// 工号
				sw.card_number.setValue("11111"); // 卡号
				sw.skdate.setAsDatetime(new Date()); // yyyy-MM-dd hh:mm:ss
				sw.sktype.setAsInt(1);// 1 刷卡 2 签卡
				sw.synid.setValue("1"); // 旧ID 同步条件
				sws.add(sw);
			}
			sws.saveBatchSimple();
			Date eddt = new Date();
			System.out.println("need time:" + ((eddt.getTime() - bgdt.getTime()) / 1000));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@ACOAction(eventname = "test1", Authentication = false, notes = "test")
	public void test1() throws Exception{
		// TODO Auto-generated method stub

		String sql="select er_id,employee_code,no_card_num,yer_no_card_num,yer_no_card_times.make_up_num,date from Hr_kq_day_report";

		CJPALineData<Hr_kq_day_report> cas = new CJPALineData<Hr_kq_day_report>(Hr_kq_day_report.class);
		cas.findDataBySQL(sql);
		for (CJPABase jpa : cas) {
			Hr_kq_day_report ca = (Hr_kq_day_report) jpa;
			System.out.print(ca.employee_code.getValue());
		}
	}




	private List<Shworg> FindOrg() throws Exception{
		List<Shworg>orgList=new ArrayList<Shworg>();
		String sqlstr = "select code,extorgname,idpath from shworg where usable=1 limit 5";
		Hr_kq_day_report report=new Hr_kq_day_report();
		List<HashMap<String, String>> reportList = report.pool.openSql2List(sqlstr);
		for(HashMap<String, String>entity :reportList)
		{
			Shworg org=new Shworg();
			org.code.setValue(entity.get("code"));
			org.extorgname.setValue(entity.get("extorgname"));
			org.idpath.setValue(entity.get("idpath"));
			orgList.add(org);
		}
		return orgList;
	}

	/*
	 *保存结果
	 */
	private void CalcReport(List<Shworg>orgList,String dqdate) throws Exception{
		CJPALineData<Hr_kq_depart_day_report> saveReportList = new CJPALineData<Hr_kq_depart_day_report>(Hr_kq_depart_day_report.class);
		for(Shworg org : orgList ){
			Hr_kq_depart_day_report saveReport= new Hr_kq_depart_day_report();
			String reportOrgSql="select a.employee_code,orgname,noclock,emnature,hiredday,t.cq,t2.qj,t3.cc,t4.tx from hr_employee a"+
					" LEFT JOIN (select  b.empno, '1' as cq from  hrkq_swcdlst b  WHERE  DATE_FORMAT(b.skdate,'%Y-%m-%d')='"+dqdate+"' GROUP BY b.empno) as t on t.empno=a.employee_code"+
					" LEFT JOIN (select  b.employee_code, '1' as qj from  hrkq_holidayapp b  WHERE  (DATE_FORMAT(b.timebg,'%Y-%m-%d')<='"+dqdate+"' and b.timeed>='"+dqdate+"') or (DATE_FORMAT(b.timebg,'%Y-%m-%d')<='"+dqdate+"' and b.timeedtrue>='"+dqdate+"') and (b.stat='9' or b.stat='2')  GROUP BY b.employee_code) as t2 on t2.employee_code=a.employee_code"+
					" LEFT JOIN (select  b.employee_code, '1' as cc from  hrkq_business_trip b  WHERE  DATE_FORMAT(b.begin_date,'%Y-%m-%d')<='"+dqdate+"' and b.end_date>='"+dqdate+"' and (b.stat='9' or b.stat='2')  GROUP BY b.employee_code) as t3 on t3.employee_code=a.employee_code"+
					" LEFT JOIN (select  b.employee_code, '1' as tx from  hrkq_wkoff b  WHERE  DATE_FORMAT(b.begin_date,'%Y-%m-%d')<='"+dqdate+"' and b.end_date>='"+dqdate+"' and (b.stat='9' or b.stat='2')  GROUP BY b.employee_code) as t4 on t4.employee_code=a.employee_code"+
					" where a.idpath like '"+org.idpath.getValue()+"%' and a.empstatid<>'12'  and a.empstatid<>'13' and  a.hiredday<='"+dqdate+"'";
			Hr_kq_depart_day_report report=new Hr_kq_depart_day_report();
			List<HashMap<String, String>> reportList = report.pool.openSql2List(reportOrgSql);
			int zz=reportList.size();
			int cc=0;
			int tx=0;
			int qj=0;
			int mdk=0;
			int cq=0;
			int tcwdk=0;//脱产无打卡
			int ftcwdk=0;//非脱产无打卡
			int rzdtwdk=0;//当天入职无打卡
			for(HashMap<String, String>entity :reportList)
			{
				String scc="";
				String stx="";
				String sqj="";
				String scq="";
				if(entity.get("cc")!=null){
					scc=entity.get("cc");
				}
				if(entity.get("tx")!=null){
					stx=entity.get("tx");
				}
				if(entity.get("qj")!=null){
					sqj=entity.get("qj");
				}
				if(entity.get("cq")!=null){
					scq=entity.get("cq");
				}
				if(scc.equals("1")){
					cc++;
				}else if(stx.equals("1")){
					tx++;
				}else if(sqj.equals("1")){
					qj++;
				}else if(scq.equals("1")){
					cq++;
				}else{
					//缺勤
					if(entity.get("emnature").equals("脱产") && entity.get("noclock").equals("2")){
						tcwdk++;
					}else if(entity.get("emnature").equals("非脱产")&& entity.get("noclock").equals("2")){
						ftcwdk++;
					}
					//统计当天入职无打卡
					//System.out.print(entity.get("hiredday"));
					String hiredday=Systemdate.getStrDateyyyy_mm_dd(Systemdate.getDateByyyyy_mm_dd(entity.get("hiredday")));
					if(hiredday.equals(dqdate))
					{
						rzdtwdk++;
					}
				}
				if(entity.get("noclock").equals("1")){
					mdk++;
					cq++;
				}
			}
			saveReport.orgcode.setValue(org.code.getValue());
			saveReport.orgname.setValue(org.extorgname.getValue());
			saveReport.cc.setValue(cc);
			saveReport.tx.setValue(tx);
			saveReport.qj.setValue(qj);
			saveReport.mdk.setValue(mdk);
			saveReport.cq.setValue(cq);
			saveReport.tcwdk.setValue(tcwdk);
			saveReport.ftcwdk.setValue(ftcwdk);
			saveReport.rzdtwdk.setValue(rzdtwdk);
			saveReport.zz.setValue(zz);
			saveReport.date.setValue(dqdate);

			if(zz>0){
				double sum=cq+cc+tx;
				sum=sum/zz*100;
				BigDecimal bg = new BigDecimal(sum);
				sum = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
				if(sum>100){
					saveReport.cqdcl.setValue("100%");

				}else{
					saveReport.cqdcl.setValue(sum+"%");
				}
			}else{
				saveReport.cqdcl.setValue("0%");
			}
			saveReportList.add(saveReport);
			if(saveReportList.size()==100){
				//每1000条记录保存一次
				saveReportList.saveBatchSimple();
				saveReportList.clear();
			}
		}
		if(saveReportList.size()>0){
			saveReportList.saveBatchSimple();
		}
	}
	/**
	 * tp 1 发送 2 更新审批人 3 删除
	 * 
	 * @return
	 * @throws Exception
	 */
	@ACOAction(eventname = "testmail", Authentication = false, notes = "test")
	public String testmail() throws Exception {
		HashMap<String, String> parms = CSContext.get_pjdataparms();
		String aynemid = CorUtil.hashMap2Str(parms, "aynemid", "需要参数【aynemid】");
		int tp = Integer.valueOf(CorUtil.hashMap2Str(parms, "tp", "需要参数【tp】"));
		Hr_emailsend_log ml = new Hr_emailsend_log();
		String sqlstr = "SELECT * FROM hr_emailsend_log WHERE aynemid='" + aynemid + "'";
		System.out.println(sqlstr);
		ml.findBySQL(sqlstr);
		if (ml.isEmpty())
			throw new Exception("消息不存在");
		if (tp == 1) {
			DLHRMailCenterWS.sendmailex(ml);
		} else if (tp == 2) {
			String approvalman = CorUtil.hashMap2Str(parms, "approvalman");
			String approvaldate = CorUtil.hashMap2Str(parms, "approvaldate");
			DLHRMailCenterWS.updatemail(aynemid, approvalman, approvaldate);
		} else if (tp == 3) {
			// DLHRMailCenterWS.delMail(aynemid);
		} else
			throw new Exception("tp错误");
		ml.findBySQL(sqlstr);
		return ml.tojson();
	}
}
